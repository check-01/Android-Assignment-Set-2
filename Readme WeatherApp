# WeatherTrack

WeatherTrack is an Android app that allows users to track daily weather statistics in their city. The app fetches weather data from a mock API, stores it locally every 6 hours, and displays a weekly summary with temperature trends and details.

---

## Features

- *Fetch Weather:*  
  Retrieves temperature, humidity, and condition from a mock API. Each fetch is saved in a local Room database with a timestamp.

- *Auto Background Sync:*  
  Uses WorkManager to fetch and store weather data every 6 hours automatically. Users can also refresh data manually.

- *Weekly Summary Screen:*  
  Shows a graph and list of temperature changes over the past 7 days. Tap any day to view detailed weather info.

- *Architecture:*  
  Built with Java and MVVM, with clear separation between ViewModel, Repository, and Data Source (API and Database).

- *Error Handling:*  
  Displays user-friendly messages for:
  - No internet connection
  - API errors
  - Database errors

---


## Project Structure

com.example.weathertrack/
│
├── MainActivity.java
├── WeeklySummaryActivity.java
│
├── data/
│   ├── WeatherEntity.java
│   ├── WeatherDao.java
│   └── WeatherDatabase.java
│
├── network/
│   └── WeatherApiService.java
│
├── repository/
│   └── WeatherRepository.java
│
├── viewmodel/
│   └── WeatherViewModel.java
│
├── worker/
│   └── WeatherSyncWorker.java
│
├── utils/
│   ├── NetworkUtils.java
│   └── Result.java
│
res/
├── layout/
│   ├── activity_main.xml
│   └── activity_weekly_summary.xml
├── values/
│   └── strings.xml

---

## How It Works

1. *Fetching Weather:*  
   Weather data is generated by a mock API and stored in a Room database.

2. *Background Sync:*  
   WorkManager schedules a job to fetch and save weather data every 6 hours.

3. *Weekly Summary:*  
   The app displays a line graph (MPAndroidChart) and a list of the past 7 days’ temperatures. Tapping a data point or list item shows detailed stats for that day.

4. *Error Handling:*  
   The app checks for internet connectivity and handles API/database errors, displaying clear messages.

---